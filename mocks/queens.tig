/* A program to solve the 8-queens problem */
/*
let
    var N := 8

    type intArray = array of int

    var row := intArray [ N ] of 0
    var col := intArray [ N ] of 0
    var diag1 := intArray [N+N-1] of 0
    var diag2 := intArray [N+N-1] of 0

    function printboard() =
       (for i := 0 to N-1
	 do (for j := 0 to N-1 
	      do print(if col[i]=j then " O" else " .");
	     print("\n"));
         print("\n"))

    function try(c:int) = 
( /*  for i:= 0 to c do print("."); print("\n"); flush();*/
     if c=N
     then printboard()
     else for r := 0 to N-1
	   do if row[r]=0 & diag1[r+c]=0 & diag2[r+7-c]=0
	           then (row[r]:=1; diag1[r+c]:=1; diag2[r+7-c]:=1;
		         col[c]:=r;
	                 try(c+1);
			 row[r]:=0; diag1[r+c]:=0; diag2[r+7-c]:=0)

)
 in try(0)
end
*/
let
    var N = 8
    var row = [N]int
    var col = [N]int
    var diag1 = [N + N - 1]int
    var diag1 = [N + N - 1]int

    var i = 0
    var j = 0
    function printboard = {
        while i < N - 1 {
            while j < N -1 {
                print(if col[i] == j then " 0" else " ." end);
                j = j + 1
            };
            print("\n");
            i = i + 1
        };
        print("\n")
    }

    var r = 0
    function try(c: int) {
        if c == N then {
            printboard()
        } else {
            while r < N -1 {
                if (row[r] == 0 & diag1[r + c] == 0 & diag[r + 7 - c] == 0) then {
                    row[r] = 1;
                    diag1[r + c] = 1;
                    diag2[r + 7 - c] = 1;
                    col[c] = r;
                    try(c + 1);
                    row[r] = 0;
                    diag1[r + c] = 0;
                    diag2[r + 7 -c] = 0
                } end;
                r = r + 1
            }
        } end
    }
in
    try(0)
end
	